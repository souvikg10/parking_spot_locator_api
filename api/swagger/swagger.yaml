swagger: "2.0"
info:
  version: "0.0.1"
  title: Parking API
# during dev, should point to your local machine
host: localhost:3001
# basePath prefixes all resource paths 
basePath: /v1
# 
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /location/shareLocation:
    # binds a127 app logic to a route
    x-swagger-router-controller: share_location
    post:
      tags:
      - "location"
      description: user shares his current location
      # used as the method name of the controller
      operationId: shareLocation
      parameters:
        - name: "Request"
          in: "body"
          description: shares his current location
          required: true
          schema: 
            $ref: "#/definitions/Request"
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/Response"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /location/updateLocationSpotAccuracy:
    x-swagger-router-controller: update_location
    put:
      tags:
      - "location"
      summary: "Update location accuracy"
      description: ""
      operationId: "updatelocationaccuracy"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        description: "Updating location accuracy "
        required: true
        schema:
          $ref: "#/definitions/UpdateLocationAccuracy"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid ID supplied"
        404:
          description: "User not found"
  /user/createUser:
    #binds a127 app logic to a route
    x-swagger-router-controller: create_user
    post:
      description: "Create a new user"
      operationId: createUser
      parameters:
        - name: "User"
          in: body
          description: "creates a new user account"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/Response"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"          
  /user/{userID}:
    x-swagger-router-controller: get_user
    get:
      tags:
      - "user"
      summary: "Find User by ID"
      description: "Returns a single user"
      operationId: "getUserByID"
      produces:
      - "application/json"
      parameters:
      - name: "userID"
        in: "path"
        description: "ID of user to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid ID supplied"
        404:
          description: "User not found"
  /user/updateUserCarType:
    x-swagger-router-controller: update_user
    put:
      tags:
      - "user"
      summary: "Update User data by ID"
      description: ""
      operationId: "updatecartype"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        description: "updating user car type"
        required: true
        schema:
          $ref: "#/definitions/UpdateUser"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid ID supplied"
        404:
          description: "User not found"
  /swagger:
    x-swagger-pipe: swagger_raw
# complex objects have schema definitions
definitions:
  UpdateUser:
    required:
     - uid
     - updatedata
    properties:
     uid:
      type: string
     updatedata:
      type: object
  UpdateLocationAccuracy:
    required:
     - uid
     - updatedata
    properties:
     uid:
      type: integer
     updatedata:
      type: object
  User:
    required:
     - username
     - email
     - photoURL
     - uid
    properties:
     username:
      type: string
     email:
      type: string
     photoURL:
      type: string
     uid:
      type: string
  Request:
    required: 
      - location
      - timestamp
      - user
      - cartype
    properties:
      location:
        type: object
      timestamp:
        type: string
      user:
        type: string
      cartype:
        type: string
  Response:
    required:
      - message
    properties:
      message:
        type: string
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string
